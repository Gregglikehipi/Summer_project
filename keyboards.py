from telebot import types

ingredients_selected = False
favorites_selected = False


def print_categories(categories):
    str = ''
    for cat in categories:
        str += cat
    return str


def print_ingredients(ingredients):
    str = ''
    for ing in ingredients:
        str += ing
    return str

'''def get_selection_of_recipes():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    bt1 = types.KeyboardButton(text='–§–∏–ª—å—Ç—Ä—ã –¥–ª—è –±–ª—é–¥üîç')
    bt2 = types.KeyboardButton(text='–°–ø–∏—Å–æ–∫ —Ä–µ—Ü–µ–ø—Ç–æ–≤üìÉ')
    bt3 = types.KeyboardButton(text='‚úÖ–ù–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –Ω–∞ –∫—É—Ö–Ω–µü•°')
    bt4 = types.KeyboardButton(text='‚úÖ–ù–∞ –æ—Å–Ω–æ–≤–µ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö‚ù§Ô∏è')
    bt5 = types.KeyboardButton(text='–ù–∞–∑–∞–¥‚èÆÔ∏è')
    kb.row(bt1, bt2)
    kb.row(bt3 if is_products_selected() else '–ù–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –Ω–∞ –∫—É—Ö–Ω–µü•°',
           bt4 if is_favorites_selected() else '–ù–∞ –æ—Å–Ω–æ–≤–µ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö‚ù§Ô∏è')
    kb.row(bt5)
    return kb '''


def is_products_selected():
    return True


def is_favorites_selected():
    return True

def get_back():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    bt1 = types.KeyboardButton(text='–ù–∞–∑–∞–¥‚èÆÔ∏è')
    kb.row(bt1)
    return kb

def get_start():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    bt1 = types.KeyboardButton(text='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—åüë§')
    bt2 = types.KeyboardButton(text='–ú–µ–Ω–µ–¥–∂–µ—Äüíº')
    bt3 = types.KeyboardButton(text='–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Äüîí')
    kb.row(bt1)
    kb.row(bt2)
    kb.row(bt3)
    return kb


def get_start2():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    bt2 = types.KeyboardButton(text='–ú–µ–Ω–µ–¥–∂–µ—Äüíº')
    bt3 = types.KeyboardButton(text='–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Äüîí')
    kb.row(bt2)
    kb.row(bt3)
    return kb


def get_start_for_user():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    bt1 = types.KeyboardButton(text='–ü–æ–¥–±–æ—Ä–∫–∞ —Ä–µ—Ü–µ–ø—Ç–æ–≤üìÉ')
    bt2 = types.KeyboardButton(text='–†–µ—Ü–µ–ø—Ç—ã –Ω–∞ –¥–µ–Ω—åüìöÔ∏è')
    bt3 = types.KeyboardButton(text='–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç‚ù§Ô∏è')
    bt4 = types.KeyboardButton(text='–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω–æ–µüç≥')
    bt5 = types.KeyboardButton(text='–ü—Ä–æ–¥—É–∫—Ç—ã –Ω–∞ –∫—É—Ö–Ω–µü•°')
    kb.add(bt1, bt2, bt3, bt4, bt5)
    return kb


def get_start_for_manager():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    bt1 = types.KeyboardButton(text='–î–µ–π—Å—Ç–≤–∏–µ –Ω–∞–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–ºüë§')
    bt2 = types.KeyboardButton(text='–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—åüìä')
    bt3 = types.KeyboardButton(text='–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —á–∏—Å–ª–æ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–πüë•')
    bt4 = types.KeyboardButton(text='–î–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—èüôã‚Äç‚ôÇÔ∏è')
    kb.row(bt1, bt4)
    kb.row(bt2, bt3)
    return kb


def get_info_get_balance():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    bt1 = types.KeyboardButton(text='–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—èüìã')
    bt2 = types.KeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å —Ç–æ–Ω–µ–Ω–æ–≤üí∞')
    bt3 = types.KeyboardButton(text='–í–µ—Ä–Ω—É—Ç—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—éüè†')
    kb.row(bt1, bt2)
    kb.row(bt3)
    return kb


def get_time_interval():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    bt1 = types.KeyboardButton(text='1Ô∏è‚É£ –¥–µ–Ω—å')
    bt2 = types.KeyboardButton(text='1Ô∏è‚É£ –Ω–µ–¥–µ–ª—è')
    bt3 = types.KeyboardButton(text='1Ô∏è‚É£ –º–µ—Å—è—Ü')
    bt4 = types.KeyboardButton(text='1Ô∏è‚É£ –≥–æ–¥')
    bt5 = types.KeyboardButton(text='–í–µ—Ä–Ω—É—Ç—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—éüè†')
    kb.row(bt1, bt2)
    kb.row(bt3, bt4)
    kb.row(bt5)
    return kb


def get_start_for_admin():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    bt1 = types.KeyboardButton(text='–î–µ–π—Å—Ç–≤–∏–µ –Ω–∞–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–ºüë§')
    bt2 = types.KeyboardButton(text='–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—åüìä')
    bt3 = types.KeyboardButton(text='–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —á–∏—Å–ª–æ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–πüë•')
    bt4 = types.KeyboardButton(text='–î–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—èüôã‚Äç‚ôÇÔ∏è')
    bt5 = types.KeyboardButton(text='–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ä–µ—Ü–µ–ø—Ç–∞—ÖüîÑ')
    kb.row(bt1, bt4)
    kb.row(bt2, bt3)
    kb.row(bt5)
    return kb


def get_selection_of_recipes():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    bt1 = types.KeyboardButton(text='–§–∏–ª—å—Ç—Ä—ã –¥–ª—è –±–ª—é–¥üîç')
    bt2 = types.KeyboardButton(text='–°–ø–∏—Å–æ–∫ —Ä–µ—Ü–µ–ø—Ç–æ–≤üìÉ')
    bt3 = types.KeyboardButton(text='–ù–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –Ω–∞ –∫—É—Ö–Ω–µü•°')
    bt4 = types.KeyboardButton(text='–ù–∞ –æ—Å–Ω–æ–≤–µ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö‚ù§Ô∏è')
    bt5 = types.KeyboardButton(text='–ù–∞–∑–∞–¥‚èÆÔ∏è')
    kb.row(bt1, bt2)
    kb.row(bt3, bt4)
    kb.row(bt5)
    return kb



"""def get_selection_of_recipes():
    global ingredients_selected, favorites_selected
    keyboard = [
        [
            KeyboardButton(text='–§–∏–ª—å—Ç—Ä—ã –¥–ª—è –±–ª—é–¥üîç'),
            KeyboardButton(text='–°–ø–∏—Å–æ–∫ —Ä–µ—Ü–µ–ø—Ç–æ–≤üìÉ')
        ],
        [
            KeyboardButton(
                text='–ù–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –Ω–∞ –∫—É—Ö–Ω–µü•°' if not ingredients_selected else '‚úÖ –ù–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –Ω–∞ –∫—É—Ö–Ω–µü•°'),
            KeyboardButton(text='–ù–∞ –æ—Å–Ω–æ–≤–µ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö‚ù§Ô∏è' if not favorites_selected else '‚úÖ–ù–∞ –æ—Å–Ω–æ–≤–µ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö‚ù§Ô∏è')
        ],
        [
            KeyboardButton(text='–ù–∞–∑–∞–¥‚èÆÔ∏è')
        ]
    ]
    return keyboard"""


def button_callback(update, context):
    global ingredients_selected, favorites_selected

    query = update.callback_query
    data = query.data

    if data == 'ingredients':
        # –ò–∑–º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ "–ù–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –Ω–∞ –∫—É—Ö–Ω–µ"
        ingredients_selected = not ingredients_selected
    elif data == 'favorites':
        # –ò–∑–º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ "–ù–∞ –æ—Å–Ω–æ–≤–µ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö"
        favorites_selected = not favorites_selected

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = get_selection_of_recipes()
    query.edit_message_text('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=keyboard)


def get_personal_account():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    bt1 = types.KeyboardButton(text='–ü–æ–∫–∞–∑–∞—Ç—å –ø–∞–ø–∫–∏üóÇÔ∏è')
    bt2 = types.KeyboardButton(text='–°–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—ÉüìÅ')
    bt3 = types.KeyboardButton(text='–£–¥–∞–ª–∏—Ç—å –ø–∞–ø–∫—ÉüóëÔ∏è')
    bt4 = types.KeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å —Ä–µ—Ü–µ–ø—Çüìù')
    bt5 = types.KeyboardButton(text='–õ–∏—á–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ãüìú')
    bt6 = types.KeyboardButton(text='–ò–∑–±—Ä–∞–Ω–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã‚ù§Ô∏è')
    bt7 = types.KeyboardButton(text='–ù–∞–∑–∞–¥‚è™')
    kb.row(bt1, bt2, bt3)
    kb.row(bt4, bt5, bt6)
    kb.row(bt7)
    return kb


def get_filters_for_dishes():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    bt1 = types.KeyboardButton(text='–ü—Ä–æ–¥—É–∫—Ç—ãü•©')
    bt2 = types.KeyboardButton(text='–ö–∞—Ç–µ–≥–æ—Ä–∏—èüçï')
    bt3 = types.KeyboardButton(text='–ú–µ–Ω—éüçΩÔ∏è')
    bt4 = types.KeyboardButton(text='–ö–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—åüçî')
    bt5 = types.KeyboardButton(text='–ö—É—Ö–Ω—èü•ê')
    bt6 = types.KeyboardButton(text='–°–±—Ä–æ—Å–∏—Ç—åüîÑ')
    bt7 = types.KeyboardButton(text='–ù–∞–∑–∞–¥‚óÄÔ∏è')
    kb.row(bt1, bt2)
    kb.row(bt3, bt4)
    kb.row(bt5, bt6)
    kb.row(bt7)
    return kb


def get_list_of_recipes():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    bt1 = types.KeyboardButton(text='–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ—Ü–µ–ø—Çüìú')
    bt2 = types.KeyboardButton(text='–ù–∞–∑–∞–¥‚Ü©Ô∏è')
    kb.row(bt1)
    kb.row(bt2)
    return kb


def get_viewing_a_dish():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    bt1 = types.KeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç‚ù§Ô∏è')
    bt2 = types.KeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å –≤ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω–æ–µüç≥')
    bt3 = types.KeyboardButton(text='–ù–∞–∑–∞–¥‚¨ÖÔ∏è')
    kb.row(bt1, bt2)
    kb.row(bt3)
    return kb


def personal_and_favorites():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    bt1 = types.KeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ‚ù§Ô∏è')
    bt2 = types.KeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø–∞–ø–∫—ÉüóÇÔ∏è')
    bt3 = types.KeyboardButton(text='–°–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—ÉüìÅ')
    kb.row(bt1)
    kb.row(bt2)
    kb.row(bt3)
    return kb


def get_add_to_the_cooked():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    bt1 = types.KeyboardButton(text='–ü–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—åüëçüèª')
    bt2 = types.KeyboardButton(text='–ù–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—åüëéüèª')
    kb.row(bt1, bt2)
    return kb


def get_caloricity():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    bt1 = types.KeyboardButton(text='–ù–∏–∑–∫–∞—èüçÖ')
    bt2 = types.KeyboardButton(text='–°—Ä–µ–¥–Ω—è—èüçá')
    bt3 = types.KeyboardButton(text='–í—ã—Å–æ–∫–∞—èüå≠')
    kb.row(bt1)
    kb.row(bt2)
    kb.row(bt3)
    return kb


def get_category():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    bt1 = types.KeyboardButton(text='–ó–∞–≤—Ç—Ä–∞–∫–∏ü•ê')
    bt2 = types.KeyboardButton(text='–ë—É–ª—å–æ–Ω—ãü•ò')
    bt3 = types.KeyboardButton(text='–ó–∞–∫—É—Å–∫–∏üçü')
    bt4 = types.KeyboardButton(text='–ù–∞–ø–∏—Ç–∫–∏ü•§')
    bt5 = types.KeyboardButton(text='–†–∏–∑–æ—Ç—Ç–æüçõ')
    bt6 = types.KeyboardButton(text='–û—Å–Ω–æ–≤—ã–µ –±–ª—é–¥–∞üçó')
    bt7 = types.KeyboardButton(text='–ü–∞—Å—Ç–∞ –∏ –ø–∏—Ü—Ü–∞üçù')
    bt8 = types.KeyboardButton(text='–°–∞–ª–∞—Ç—ãü•ó')
    bt9 = types.KeyboardButton(text='–°–æ—É—Å—ã –∏ –º–∞—Ä–∏–Ω–∞–¥—ãüçØ')
    bt10 = types.KeyboardButton(text='–°—É–ø—ãüç≤')
    bt11 = types.KeyboardButton(text='–°—ç–Ω–¥–≤–∏—á–∏ü•™')
    bt12 = types.KeyboardButton(text='–í—ã–ø–µ—á–∫–∞ –∏ –¥–µ—Å–µ—Ä—Ç—ãüç©')
    bt13 = types.KeyboardButton(text='–ó–∞–≥–æ—Ç–æ–≤–∫–∏ü•í')
    kb.row(bt1, bt2)
    kb.row(bt3, bt4)
    kb.row(bt5, bt8)
    kb.row(bt10, bt11)
    kb.row(bt9)
    kb.row(bt6)
    kb.row(bt7)
    kb.row(bt12)
    kb.row(bt13)
    return kb


def get_menu():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    bt1 = types.KeyboardButton(text='–ë–µ–∑–≥–ª—é—Ç–µ–Ω–æ–≤–∞—è –¥–∏–µ—Ç–∞üçì')
    bt2 = types.KeyboardButton(text='–í–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å–∫–∞—è –µ–¥–∞ü•ó')
    bt3 = types.KeyboardButton(text='–í–µ–≥–∞–Ω—Å–∫–∞—è –µ–¥–∞üçö')
    bt4 = types.KeyboardButton(text='–ë–µ–∑–ª–∞–∫—Ç–æ–∑–Ω–∞—è –¥–∏–µ—Ç–∞üêü')
    bt5 = types.KeyboardButton(text='–î–µ—Ç—Å–∫–æ–µ –º–µ–Ω—éüçü')
    bt6 = types.KeyboardButton(text='–ü–æ—Å—Ç–Ω–∞—è –µ–¥–∞üç™')
    bt7 = types.KeyboardButton(text='–ú–µ–Ω—é –ø—Ä–∏ –¥–∏–∞–±–µ—Ç–µü•ë')
    kb.row(bt1)
    kb.row(bt2)
    kb.row(bt3)
    kb.row(bt4)
    kb.row(bt5)
    kb.row(bt6)
    kb.row(bt7)
    return kb


cuisines = [
    "–ê–±—Ö–∞–∑—Å–∫–∞—èüçì",
    "–ê–≤—Å—Ç—Ä–∞–ª–∏–π—Å–∫–∞—èüßÅ",
    "–ê–≤—Å—Ç—Ä–∏–π—Å–∫–∞—èü•ë",
    "–ê–≤—Ç–æ—Ä—Å–∫–∞—èü•ù",
    "–ê–∑–µ—Ä–±–∞–π–¥–∂–∞–Ω—Å–∫–∞—èüêü",
    "–ê–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∞—èü•§",
    "–ê—Ä–∞–±—Å–∫–∞—èü•ò",
    "–ê—Ä–≥–µ–Ω—Ç–∏–Ω—Å–∫–∞—èüçâ",
    "–ê—Ä–º—è–Ω—Å–∫–∞—èüçö",
    "–ê—Ñ–≥–∞–Ω—Å–∫–∞—èüçú",
    "–ê—Ñ—Ä–∏–∫–∞–Ω—Å–∫–∞—èü•ï",
    "–ë–µ–ª–æ—Ä—É—Å—Å–∫–∞—èü•≠",
    "–ë–µ–ª—å–≥–∏–π—Å–∫–∞—èüç´",
    "–ë–æ–ª–≥–∞—Ä—Å–∫–∞—èüçü",
    "–ë—Ä–∞–∑–∏–ª—å—Å–∫–∞—èüçç",
    "–ë—Ä–∏—Ç–∞–Ω—Å–∫–∞—èüç∂",
    "–í–µ–Ω–≥–µ—Ä—Å–∫–∞—èü•ó",
    "–í–æ—Å—Ç–æ—á–Ω–æ-–∏–Ω–¥–∏–π—Å–∫–∞—èüçé",
    "–í—å–µ—Ç–Ω–∞–º—Å–∫–∞—èü•û",
    "–ì–æ–ª–ª–∞–Ω–¥—Å–∫–∞—èü•ö",
    "–ì—Ä–µ—á–µ—Å–∫–∞—èü••",
    "–ì—Ä—É–∑–∏–Ω—Å–∫–∞—èü•ì",
    "–î–∞–≥–µ—Å—Ç–∞–Ω—Å–∫–∞—èü•©",
    "–î–∞—Ç—Å–∫–∞—èüç¨",
    "–ï–≤—Ä–µ–π—Å–∫–∞—èüçî",
    "–ï–≤—Ä–æ–ø–µ–π—Å–∫–∞—è‚òï",
    "–ò–Ω–¥–∏–π—Å–∫–∞—èüçÜ",
    "–ò–Ω–¥–æ–Ω–µ–∑–∏–π—Å–∫–∞—èüç±",
    "–ò—Ä–ª–∞–Ω–¥—Å–∫–∞—èüçµ",
    "–ò—Å–ª–∞–Ω–¥—Å–∫–∞—èüçï",
    "–ò—Å–ø–∞–Ω—Å–∫–∞—èüç†",
    "–ò—Ç–∞–ª—å—è–Ω—Å–∫–∞—èüçù",
    "–ö–∞–≤–∫–∞–∑—Å–∫–∞—èüçñ",
    "–ö–∞–∑–∞—Ö—Å–∫–∞—èüçå",
    "–ö–∞–Ω–∞–¥—Å–∫–∞—èü•™",
    "–ö–∏—Ä–≥–∏–∑—Å–∫–∞—èüå∂Ô∏è",
    "–ö–∏—Ç–∞–π—Å–∫–∞—èü•§",
    "–ö–æ—Ä–µ–π—Å–∫–∞—èüçô",
    "–ö—Ä–µ–æ–ª—å—Å–∫–∞—èüç¶",
    "–ö—É–±–∏–Ω—Å–∫–∞—èüåÆ",
    "–õ–∞—Ç–≤–∏–π—Å–∫–∞—èüçπ",
    "–õ–∞—Ç–∏–Ω–æ–∞–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∞—èüå≠",
    "–õ–∏–≤–∞–Ω—Å–∫–∞—èüßÄ",
    "–õ–∏—Ç–æ–≤—Å–∫–∞—èüåØ",
    "–ú–∞–ª–∞–π–∑–∏–π—Å–∫–∞—èüçì",
    "–ú–∞—Ä–æ–∫–∫–∞–Ω—Å–∫–∞—èüçú",
    "–ú–µ–∫—Å–∏–∫–∞–Ω—Å–∫–∞—èüçó",
    "–ú–∏—Ä–æ–≤–∞—èüçÑ",
    "–ú–æ–ª–¥–∞–≤—Å–∫–∞—èüçñ",
    "–ù–µ–º–µ—Ü–∫–∞—èü•≠",
    "–ù–æ—Ä–≤–µ–∂—Å–∫–∞—èüç≤",
    "–û–¥–µ—Å—Å–∫–∞—èü•¨",
    "–û—Å–µ—Ç–∏–Ω—Å–∫–∞—èüçö",
    "–ü–∞–Ω–∞–∑–∏–∞—Ç—Å–∫–∞—èüçø",
    "–ü–µ—Ä—Å–∏–¥—Å–∫–∞—èü•¶",
    "–ü–µ—Ä—É–∞–Ω—Å–∫–∞—èü•õ",
    "–ü–æ–ª—å—Å–∫–∞—èüç∞",
    "–ü–æ—Ä—Ç—É–≥–∞–ª—å—Å–∫–∞—èü•î",
    "–†—É—Å—Å–∫–∞—èüçá",
    "–°–µ—Ä–±—Å–∫–∞—èü•ú",
    "–°–∏–Ω–≥–∞–ø—É—Ä—Å–∫–∞—èüßÖ",
    "–°–∏—Ü–∏–ª–∏–π—Å–∫–∞—èüç∂",
    "–°–∫–∞–Ω–¥–∏–Ω–∞–≤—Å–∫–∞—èüç©",
    "–°–æ–≤–µ—Ç—Å–∫–∞—èüçÖ",
    "–°—Ä–µ–¥–∏–∑–µ–º–Ω–æ–º–æ—Ä—Å–∫–∞—èü•ô",
    "–¢–∞–π—Å–∫–∞—èüçä",
    "–¢–∞—Ç–∞—Ä—Å–∫–∞—èü•ß",
    "–¢—É—Ä–µ—Ü–∫–∞—èü•©",
    "–¢—É—Ä–∫–º–µ–Ω—Å–∫–∞—èüçñ",
    "–£–∑–±–µ–∫—Å–∫–∞—èüç†",
    "–£–∫—Ä–∞–∏–Ω—Å–∫–∞—èü•í",
    "–§–∏–ª–∏–ø–ø–∏–Ω—Å–∫–∞—èüåΩ",
    "–§–∏–Ω—Å–∫–∞—èü•û",
    "–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∞—èü•ê",
    "–ß–µ—á–µ–Ω—Å–∫–∞—èüçí",
    "–ß–µ—à—Å–∫–∞—èüçë",
    "–®–≤–µ–¥—Å–∫–∞—èüçü",
    "–®–≤–µ–π—Ü–∞—Ä—Å–∫–∞—èü•®",
    "–®–æ—Ç–ª–∞–Ω–¥—Å–∫–∞—èüç§",
    "–≠—Å—Ç–æ–Ω—Å–∫–∞—èü•ï",
    "–Æ–≥–æ—Å–ª–∞–≤—Å–∫–∞—èüßÄ",
    "–Ø–ø–æ–Ω—Å–∫–∞—èüç£"
]
arr_category = ['–ó–∞–≤—Ç—Ä–∞–∫–∏ü•ê', '–ë—É–ª—å–æ–Ω—ãü•ò', '–ó–∞–∫—É—Å–∫–∏üçü',
                '–ù–∞–ø–∏—Ç–∫–∏ü•§', '–û—Å–Ω–æ–≤–Ω—ã–µ –±–ª—é–¥–∞üçó', '–ü–∞—Å—Ç–∞ –∏ –ø–∏—Ü—Ü–∞üçù',
                '–†–∏–∑–æ—Ç—Ç–æüçõ', '–°–∞–ª–∞—Ç—ãü•ó', '–°–æ—É—Å—ã –∏ –º–∞—Ä–∏–Ω–∞–¥—ãüçØ', '–°—É–ø—ãüç≤',
                '–°—ç–Ω–¥–≤–∏—á–∏ü•™', '–í—ã–ø–µ—á–∫–∞ –∏ –¥–µ—Å–µ—Ä—Ç—ãüç©', '–ó–∞–≥–æ—Ç–æ–≤–∫–∏ü•í']

arr_menu = [
    "–ë–µ–∑–≥–ª—é—Ç–µ–Ω–æ–≤–∞—è –¥–∏–µ—Ç–∞üçì",
    "–í–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å–∫–∞—è –µ–¥–∞ü•ó",
    "–í–µ–≥–∞–Ω—Å–∫–∞—è –µ–¥–∞üçö",
    "–ë–µ–∑–ª–∞–∫—Ç–æ–∑–Ω–∞—è –¥–∏–µ—Ç–∞üêü",
    "–î–µ—Ç—Å–∫–æ–µ –º–µ–Ω—éüçü",
    "–ü–æ—Å—Ç–Ω–∞—è –µ–¥–∞üç™",
    "–ú–µ–Ω—é –ø—Ä–∏ –¥–∏–∞–±–µ—Ç–µü•ë"
]

kalor = ['–ù–∏–∑–∫–∞—èüçÖ', '–°—Ä–µ–¥–Ω—è—èüçá', '–í—ã—Å–æ–∫–∞—èüå≠']

products = ['–ú—è—Å–æü•©', '–û–≤–æ—â–∏ü•ï', '–ú–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã –∏ —è–π—Ü–∞ü•õ',
            '–ì—Ä–∏–±—ãüçÑ', '–û—Ä–µ—Ö–∏ü•ú', '–ö—Ä—É–ø—ã, –±–æ–±–æ–≤—ã–µ –∏ –º—É–∫–∞üçö',
            '–§—Ä—É–∫—Ç—ã –∏ —è–≥–æ–¥—ãüçí', '–ó–µ–ª–µ–Ω—å –∏ —Ç—Ä–∞–≤—ãü•¨']

types_of_meat = [
    ['–ë–µ–∫–æ–Ωü•ì', '–í–µ—Ç—á–∏–Ω–∞ü•ì'],
    ['–ì–æ–≤—è–¥–∏–Ω–∞ü•©', '–ò–Ω–¥–µ–π–∫–∞ü¶É'],
    ['–ö–æ–ª–±–∞—Å–∞üå≠', '–ö—Ä–æ–ª–∏–∫üêá'],
    ['–ö—É—Ä–∏—Ü–∞üçó', '–ü–µ—á–µ–Ω—åüçñ'],
    ['–°–∞–ª–æü•ì', '–°–∞—Ä–¥–µ–ª—å–∫–∏üå≠'],
    ['–°–≤–∏–Ω–∏–Ω–∞üê∑', '–°–µ—Ä–¥—Ü–∞‚ù§Ô∏è'],
    ['–°—Ç–µ–π–∫ü•©', '–¢–µ–ª—è—Ç–∏–Ω–∞üêÑ'],
    ['–£—Ç–∫–∞ü¶Ü', '–§–∞—Ä—àüçî']
]
types_of_vegetables = [
    ['–ê—Ä—Ç–∏—à–æ–∫–∏üåø', '–ë–∞–∫–ª–∞–∂–∞–Ω—ãüçÜ'],
    ['–ë—Ä–æ–∫–∫–æ–ª–∏ü•¶', '–ì–æ—Ä–æ—à–µ–∫üå±'],
    ['–ì—É—Ä—å–±–∞üåø', '–ö–∞–±–∞—á–∫–∏ üçÜ'],
    ['–ö–∞–ø—É—Å—Ç–∞ü•¨', '–ö–∞—Ä—Ç–æ—Ñ–µ–ª—åü•î'],
    ['–õ—É–∫üßÖ', '–ú–∞—Å–ª–∏–Ω—ãü´í'],
    ['–ú–æ—Ä–∫–æ–≤—åü•ï', '–û–≥—É—Ä—Ü—ãü•í'],
    ['–ü–µ—Ä–µ—Ü Ô∏è', '–ü–æ–¥—Å–æ–ª–Ω–µ—á–Ω–∏–∫üåª'],
    ['–ü–æ–º–∏–¥–æ—Ä—ãüçÖ', '–†–µ–¥–∏—Åü•ï'],
    ['–¢—ã–∫–≤–∞üéÉ']
]

types_of_milk_and_eggs = [
    ["–ô–æ–≥—É—Ä—Çüç®", "–ö–µ—Ñ–∏—Äü•õ"],
    ["M–∞—Ä–≥–∞—Ä–∏–Ωüßà", "M–æ–ª–æ–∫–æü•õ"],
    ["M–æ—Ä–æ–∂–µ–Ω–æ–µüç¶", "–ü—Ä–æ—Å—Ç–æ–∫–≤–∞—à–∞üç∂"],
    ["–†—è–∂–µ–Ω–∫–∞ü•õ", "–°–ª–∏–≤–∫–∏ü•õ"],
    ["–°–ª–∏–≤–æ—á–Ω–æ–µ –º–∞—Å–ª–æüßà", "–°—ã—ÄüßÄ"],
    ["–°–º–µ—Ç–∞–Ω–∞üßà", "–¢–≤–æ—Ä–æ–≥üßà"],
    ["–¢–≤–æ—Ä–æ–∂–æ–∫üßà", "–Ø–π—Ü–æü•ö"]
]

mushrooms = [
    ["–ë–µ–ª—ã–µ –≥—Ä–∏–±—ãüçÑ", "–í–µ—à–µ–Ω–∫–∏üçÑ"],
    ["–õ–∏—Å–∏—á–∫–∏üçÑ", "–û–ø—è—Ç–∞üçÑ"],
    ["–ü–æ–¥–±–µ—Ä–µ–∑–æ–≤–∏–∫–∏üçÑ", "–†—ã–∂–∏–∫–∏üçÑ"],
    ["–®–∞–º–ø–∏–Ω—å–æ–Ω—ãüçÑ"]
]

nuts = [
    ["–ê—Ä–∞—Ö–∏—Åü•ú", "–ì—Ä–µ—Ü–∫–∏–µ –æ—Ä–µ—Ö–∏üå∞"],
    ["–ö–µ–¥—Ä–æ–≤—ã–µ –æ—Ä–µ—Ö–∏üå∞", "–ö–µ—à—å—éüå≤"],
    ["–ö–æ–∫–æ—Åü••", "–ú–∞–∫–∞–¥–∞–º–∏—èüå¥"],
    ["–ú–∏–Ω–¥–∞–ª—åüå∞", "–ú—É—Å–∫–∞—Ç–Ω—ã–π –æ—Ä–µ—Öüå∞"],
    ["–û—Ä–µ—Ö–∏üå∞", "–§–∏—Å—Ç–∞—à–∫–∏üå∞"],
    ["–§—É–Ω–¥—É–∫üå∞"]
]

cereals_legumes_and_flour = [
    ["–ë–æ–±—ãüåæ", "–ë—É–ª–≥—É—Äüåæ"],
    ["–ì–µ—Ä–∫—É–ª–µ—Åüåæ", "–ì—Ä–∞–Ω–æ–ª–∞üåæ"],
    ["–ì—Ä–µ—á–Ω–µ–≤–∞—è –∫—Ä—É–ø–∞üåæ", "–ö–∞–∫–∞–æ‚òï"],
    ["–ö–æ—Ñ–µ‚òï", "–ö—É—Å–∫—É—Åüåæ"],
    ["–ú–∞–Ω–Ω–∞—è –∫—Ä—É–ø–∞üåæ", "–ú—É–∫–∞üåæ"],
    ["–ù—É—Çüåæ", "–†–∏—Åüçö"],
    ["–§–∞—Å–æ–ª—åüåæ", "–Ø—á–º–µ–Ω—åüåæ"]
]

fruits_and_berries = [
    ["–ê–±—Ä–∏–∫–æ—Å—ãüçë", "–ê–≤–æ–∫–∞–¥–æü•ë"],
    ["–ê–π–≤–∞üçê", "–ê–Ω–∞–Ω–∞—Åüçç"],
    ["–ê–ø–µ–ª—å—Å–∏–Ω—ãüçä", "–ê—Ä–±—É–∑üçâ"],
    ["–ë–∞–Ω–∞–Ω—ãüçå", "–ë—Ä—É—Å–Ω–∏–∫–∞ü´ê"],
    ["–í–∏–Ω–æ–≥—Ä–∞–¥üçá", "–í–∏—à–Ω—èüçí"],
    ["–ì–æ–ª—É–±–∏–∫–∞ü´ê", "–ì—Ä–∞–Ω–∞—Ç—ãüçé"],
    ["–ì—Ä–µ–π–ø—Ñ—Ä—É—Ç—ãüçä", "–ì—Ä—É—à–∏üçê"],
    ["–î—ã–Ω—èüçà", "–ï–∂–µ–≤–∏–∫–∞ü´ê"],
    ["–ó–µ–º–ª—è–Ω–∏–∫–∞üçì", "–ö–ª—É–±–Ω–∏–∫–∞üçì"],
    ["–ö–ª—é–∫–≤–∞üçí", "–ö—Ä—ã–∂–æ–≤–Ω–∏–∫üçá"],
    ["–õ–∞–π–ºüçã", "–õ–∏–º–æ–Ωüçã"],
    ["–ú–∞–ª–∏–Ω–∞üçì", "–ú–∞–Ω–¥–∞—Ä–∏–Ω—ãüçä"],
    ["–ú–∞–Ω–≥–æü•≠", "–ú–∞—Ä–∞–∫—É–π—èü•≠"],
    ["–û–±–ª–µ–ø–∏—Ö–∞üçä", "–ü–∞–ø–∞–π—èü•≠"],
    ["–ü–µ—Ä—Å–∏–∫–∏üçë", "–ü–æ–º–µ–ª–æüçà"],
    ["–°–ª–∏–≤—ãüçë", "–°–º–æ—Ä–æ–¥–∏–Ω–∞üçá"],
    ["–ß–µ—Ä–µ—à–Ω—èüçí", "–ß–µ—Ä–Ω–∏–∫–∞ü´ê"],
    ["–•—É—Ä–º–∞üçê", "–Ø–±–ª–æ–∫–æüçé"]
]

greenery = [
    ['–ë–∞–∑–∏–ª–∏–∫üçÉ', '–ó–µ–ª–µ–Ω—ã–π –ª—É–∫üåø'],
    ['–ó–µ–ª–µ–Ω—ã–π —Å–∞–ª–∞—Çü•¨', '–õ–∞–≤—Ä–æ–≤—ã–π –ª–∏—Å—ÇüçÉ'],
    ['–£–∫—Ä–æ–øüåø', '–≠—Å—Ç—Ä–∞–≥–æ–Ωüåø'],
    ['–ú—è—Ç–∞üçÉ', '–¢–∏–º—å—è–Ωüåø'],
    ['–ü–µ—Ç—Ä—É—à–∫–∞üåø', '–†–æ–∑–º–∞—Ä–∏–Ωüåø'],
    ['–†—É–∫–æ–ª–∞ü•¨', '–®–∞–ª—Ñ–µ–πüåø']
]


def combine_arrays(*arrays):
    combined_array = []
    for array in arrays:
        combined_array.extend(array)
    return combined_array


combined = combine_arrays(types_of_meat, types_of_vegetables, types_of_milk_and_eggs, mushrooms, nuts,
                          cereals_legumes_and_flour, fruits_and_berries, greenery)


def combine_arrays2(arrays):
    combined_array = []
    for array in arrays:
        combined_array.extend(array)
    return combined_array


com = combine_arrays2(combined)


def get_greenery():
    keyboard = types.ReplyKeyboardMarkup(row_width=2)
    buttons = []
    for row in greenery:
        button_row = []
        for word in row:
            button = types.KeyboardButton(word)
            button_row.append(button)
        buttons.append(button_row)
    keyboard.add(*[button for button_row in buttons for button in button_row])
    return keyboard


def get_nuts():
    keyboard = types.ReplyKeyboardMarkup(row_width=2)
    buttons = []
    for row in nuts:
        button_row = []
        for word in row:
            button = types.KeyboardButton(word)
            button_row.append(button)
        buttons.append(button_row)
    keyboard.add(*[button for button_row in buttons for button in button_row])
    return keyboard


def get_cereals_legumes_and_flour():
    keyboard = types.ReplyKeyboardMarkup(row_width=2)
    buttons = []
    for row in cereals_legumes_and_flour:
        button_row = []
        for word in row:
            button = types.KeyboardButton(word)
            button_row.append(button)
        buttons.append(button_row)
    keyboard.add(*[button for button_row in buttons for button in button_row])
    return keyboard


def get_fruits_and_berries():
    keyboard = types.ReplyKeyboardMarkup(row_width=2)
    buttons = []
    for row in fruits_and_berries:
        button_row = []
        for word in row:
            button = types.KeyboardButton(word)
            button_row.append(button)
        buttons.append(button_row)
    keyboard.add(*[button for button_row in buttons for button in button_row])
    return keyboard


def get_mushrooms():
    keyboard = types.ReplyKeyboardMarkup(row_width=2)
    buttons = []
    for row in mushrooms:
        button_row = []
        for word in row:
            button = types.KeyboardButton(word)
            button_row.append(button)
        buttons.append(button_row)
    keyboard.add(*[button for button_row in buttons for button in button_row])
    return keyboard


def get_types_of_milk_and_eggs():
    keyboard = types.ReplyKeyboardMarkup(row_width=2)
    buttons = []
    for row in types_of_milk_and_eggs:
        button_row = []
        for word in row:
            button = types.KeyboardButton(word)
            button_row.append(button)
        buttons.append(button_row)
    keyboard.add(*[button for button_row in buttons for button in button_row])
    return keyboard


def get_types_of_vegetables():
    keyboard = types.ReplyKeyboardMarkup(row_width=2)
    buttons = []
    for row in types_of_vegetables:
        button_row = []
        for word in row:
            button = types.KeyboardButton(word)
            button_row.append(button)
        buttons.append(button_row)
    keyboard.add(*[button for button_row in buttons for button in button_row])

    return keyboard


def get_types_of_meat():
    keyboard = types.ReplyKeyboardMarkup(row_width=2)
    buttons = []
    for row in types_of_meat:
        button_row = []
        for word in row:
            button = types.KeyboardButton(word)
            button_row.append(button)
        buttons.append(button_row)
    keyboard.add(*[button for button_row in buttons for button in button_row])

    return keyboard


def get_cuisines():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for item in cuisines:
        kb.add(types.KeyboardButton(item))
    return kb


def get_selection_of_products():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    bt1 = types.KeyboardButton(text='–ú—è—Å–æü•©')
    bt2 = types.KeyboardButton(text='–û–≤–æ—â–∏ü•ï')
    bt3 = types.KeyboardButton(text='–ú–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã –∏ —è–π—Ü–∞ü•õ')
    bt4 = types.KeyboardButton(text='–ì—Ä–∏–±—ãüçÑ')
    bt5 = types.KeyboardButton(text='–û—Ä–µ—Ö–∏ü•ú')
    bt6 = types.KeyboardButton(text='–ö—Ä—É–ø—ã, –±–æ–±–æ–≤—ã–µ –∏ –º—É–∫–∞üçö')
    bt7 = types.KeyboardButton(text='–§—Ä—É–∫—Ç—ã –∏ —è–≥–æ–¥—ãüçí')
    bt8 = types.KeyboardButton(text='–ó–µ–ª–µ–Ω—å –∏ —Ç—Ä–∞–≤—ãü•¨')
    bt9 = types.KeyboardButton(text='–ù–∞–∑–∞–¥‚óÄÔ∏è')
    kb.row(bt1, bt2)
    kb.row(bt4, bt5)
    kb.row(bt3)
    kb.row(bt6)
    kb.row(bt7)
    kb.row(bt8)
    kb.row(bt9)

    return kb


def get_quantity():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    bt1 = types.KeyboardButton(text='100 –≥—Ä–∞–º–º')
    bt2 = types.KeyboardButton(text='200 –≥—Ä–∞–º–º')
    bt3 = types.KeyboardButton(text='300 –≥—Ä–∞–º–º')
    bt4 = types.KeyboardButton(text='400 –≥—Ä–∞–º–º')
    bt5 = types.KeyboardButton(text='500 –≥—Ä–∞–º–º')
    bt6 = types.KeyboardButton(text='600 –≥—Ä–∞–º–º')
    bt7 = types.KeyboardButton(text='700 –≥—Ä–∞–º–º')
    bt8 = types.KeyboardButton(text='800 –≥—Ä–∞–º–º')
    bt9 = types.KeyboardButton(text='900 –≥—Ä–∞–º–º')
    bt9 = types.KeyboardButton(text='1 –∫–≥')
    kb.row(bt1, bt2)
    kb.row(bt4, bt5)
    kb.row(bt3)
    kb.row(bt6)
    kb.row(bt7)
    kb.row(bt8)
    kb.row(bt9)

    return kb


def get_write_a_recipe():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    bt1 = types.KeyboardButton(text='–í–≤–µ—Å—Ç–∏ —Ä–µ—Ü–µ–ø—Çüìù')
    kb.row(bt1)
    return kb

types_of_meat = [
    ['–ë–µ–∫–æ–Ωü•ì', '–í–µ—Ç—á–∏–Ω–∞ü•ì'],
    ['–ì–æ–≤—è–¥–∏–Ω–∞ü•©', '–ò–Ω–¥–µ–π–∫–∞ü¶É'],
    ['–ö–æ–ª–±–∞—Å–∞üå≠', '–ö—Ä–æ–ª–∏–∫üêá'],
    ['–ö—É—Ä–∏—Ü–∞üçó', '–ü–µ—á–µ–Ω—åüçñ'],
    ['–°–∞–ª–æü•ì', '–°–∞—Ä–¥–µ–ª—å–∫–∏üå≠'],
    ['–°–≤–∏–Ω–∏–Ω–∞üê∑', '–°–µ—Ä–¥—Ü–∞‚ù§Ô∏è'],
    ['–°—Ç–µ–π–∫ü•©', '–¢–µ–ª—è—Ç–∏–Ω–∞üêÑ'],
    ['–£—Ç–∫–∞ü¶Ü', '–§–∞—Ä—àüçî']
]
types_of_vegetables = [
    ['–ê—Ä—Ç–∏—à–æ–∫–∏üåø', '–ë–∞–∫–ª–∞–∂–∞–Ω—ãüçÜ'],
    ['–ë—Ä–æ–∫–∫–æ–ª–∏ü•¶', '–ì–æ—Ä–æ—à–µ–∫üå±'],
    ['–ì—É—Ä—å–±–∞üåø', '–ö–∞–±–∞—á–∫–∏ üçÜ'],
    ['–ö–∞–ø—É—Å—Ç–∞ü•¨', '–ö–∞—Ä—Ç–æ—Ñ–µ–ª—åü•î'],
    ['–õ—É–∫üßÖ', '–ú–∞—Å–ª–∏–Ω—ãü´í'],
    ['–ú–æ—Ä–∫–æ–≤—åü•ï', '–û–≥—É—Ä—Ü—ãü•í'],
    ['–ü–µ—Ä–µ—Ü Ô∏è', '–ü–æ–¥—Å–æ–ª–Ω–µ—á–Ω–∏–∫üåª'],
    ['–ü–æ–º–∏–¥–æ—Ä—ãüçÖ', '–†–µ–¥–∏—Åü•ï'],
    ['–¢—ã–∫–≤–∞üéÉ']
]

types_of_milk_and_eggs = [
    ["–ô–æ–≥—É—Ä—Çüç®", "–ö–µ—Ñ–∏—Äü•õ"],
    ["M–∞—Ä–≥–∞—Ä–∏–Ωüßà", "M–æ–ª–æ–∫–æü•õ"],
    ["M–æ—Ä–æ–∂–µ–Ω–æ–µüç¶", "–ü—Ä–æ—Å—Ç–æ–∫–≤–∞—à–∞üç∂"],
    ["–†—è–∂–µ–Ω–∫–∞ü•õ", "–°–ª–∏–≤–∫–∏ü•õ"],
    ["–°–ª–∏–≤–æ—á–Ω–æ–µ –º–∞—Å–ª–æüßà", "–°—ã—ÄüßÄ"],
    ["–°–º–µ—Ç–∞–Ω–∞üßà", "–¢–≤–æ—Ä–æ–≥üßà"],
    ["–¢–≤–æ—Ä–æ–∂–æ–∫üßà", "–Ø–π—Ü–æü•ö"]
]

mushrooms = [
    ["–ë–µ–ª—ã–µ –≥—Ä–∏–±—ãüçÑ", "–í–µ—à–µ–Ω–∫–∏üçÑ"],
    ["–õ–∏—Å–∏—á–∫–∏üçÑ", "–û–ø—è—Ç–∞üçÑ"],
    ["–ü–æ–¥–±–µ—Ä–µ–∑–æ–≤–∏–∫–∏üçÑ", "–†—ã–∂–∏–∫–∏üçÑ"],
    ["–®–∞–º–ø–∏–Ω—å–æ–Ω—ãüçÑ"]
]

nuts = [
    ["–ê—Ä–∞—Ö–∏—Åü•ú", "–ì—Ä–µ—Ü–∫–∏–µ –æ—Ä–µ—Ö–∏üå∞"],
    ["–ö–µ–¥—Ä–æ–≤—ã–µ –æ—Ä–µ—Ö–∏üå∞", "–ö–µ—à—å—éüå≤"],
    ["–ö–æ–∫–æ—Åü••", "–ú–∞–∫–∞–¥–∞–º–∏—èüå¥"],
    ["–ú–∏–Ω–¥–∞–ª—åüå∞", "–ú—É—Å–∫–∞—Ç–Ω—ã–π –æ—Ä–µ—Öüå∞"],
    ["–û—Ä–µ—Ö–∏üå∞", "–§–∏—Å—Ç–∞—à–∫–∏üå∞"],
    ["–§—É–Ω–¥—É–∫üå∞"]
]

cereals_legumes_and_flour = [
    ["–ë–æ–±—ãüåæ", "–ë—É–ª–≥—É—Äüåæ"],
    ["–ì–µ—Ä–∫—É–ª–µ—Åüåæ", "–ì—Ä–∞–Ω–æ–ª–∞üåæ"],
    ["–ì—Ä–µ—á–Ω–µ–≤–∞—è –∫—Ä—É–ø–∞üåæ", "–ö–∞–∫–∞–æ‚òï"],
    ["–ö–æ—Ñ–µ‚òï", "–ö—É—Å–∫—É—Åüåæ"],
    ["–ú–∞–Ω–Ω–∞—è –∫—Ä—É–ø–∞üåæ", "–ú—É–∫–∞üåæ"],
    ["–ù—É—Çüåæ", "–†–∏—Åüçö"],
    ["–§–∞—Å–æ–ª—åüåæ", "–Ø—á–º–µ–Ω—åüåæ"]
]

fruits_and_berries = [
    ["–ê–±—Ä–∏–∫–æ—Å—ãüçë", "–ê–≤–æ–∫–∞–¥–æü•ë"],
    ["–ê–π–≤–∞üçê", "–ê–Ω–∞–Ω–∞—Åüçç"],
    ["–ê–ø–µ–ª—å—Å–∏–Ω—ãüçä", "–ê—Ä–±—É–∑üçâ"],
    ["–ë–∞–Ω–∞–Ω—ãüçå", "–ë—Ä—É—Å–Ω–∏–∫–∞ü´ê"],
    ["–í–∏–Ω–æ–≥—Ä–∞–¥üçá", "–í–∏—à–Ω—èüçí"],
    ["–ì–æ–ª—É–±–∏–∫–∞ü´ê", "–ì—Ä–∞–Ω–∞—Ç—ãüçé"],
    ["–ì—Ä–µ–π–ø—Ñ—Ä—É—Ç—ãüçä", "–ì—Ä—É—à–∏üçê"],
    ["–î—ã–Ω—èüçà", "–ï–∂–µ–≤–∏–∫–∞ü´ê"],
    ["–ó–µ–º–ª—è–Ω–∏–∫–∞üçì", "–ö–ª—É–±–Ω–∏–∫–∞üçì"],
    ["–ö–ª—é–∫–≤–∞üçí", "–ö—Ä—ã–∂–æ–≤–Ω–∏–∫üçá"],
    ["–õ–∞–π–ºüçã", "–õ–∏–º–æ–Ωüçã"],
    ["–ú–∞–ª–∏–Ω–∞üçì", "–ú–∞–Ω–¥–∞—Ä–∏–Ω—ãüçä"],
    ["–ú–∞–Ω–≥–æü•≠", "–ú–∞—Ä–∞–∫—É–π—èü•≠"],
    ["–û–±–ª–µ–ø–∏—Ö–∞üçä", "–ü–∞–ø–∞–π—èü•≠"],
    ["–ü–µ—Ä—Å–∏–∫–∏üçë", "–ü–æ–º–µ–ª–æüçà"],
    ["–°–ª–∏–≤—ãüçë", "–°–º–æ—Ä–æ–¥–∏–Ω–∞üçá"],
    ["–ß–µ—Ä–µ—à–Ω—èüçí", "–ß–µ—Ä–Ω–∏–∫–∞ü´ê"],
    ["–•—É—Ä–º–∞üçê", "–Ø–±–ª–æ–∫–æüçé"]
]

greenery = [
    ['–ë–∞–∑–∏–ª–∏–∫üçÉ', '–ó–µ–ª–µ–Ω—ã–π –ª—É–∫üåø'],
    ['–ó–µ–ª–µ–Ω—ã–π —Å–∞–ª–∞—Çü•¨', '–õ–∞–≤—Ä–æ–≤—ã–π –ª–∏—Å—ÇüçÉ'],
    ['–£–∫—Ä–æ–øüåø', '–≠—Å—Ç—Ä–∞–≥–æ–Ωüåø'],
    ['–ú—è—Ç–∞üçÉ', '–¢–∏–º—å—è–Ωüåø'],
    ['–ü–µ—Ç—Ä—É—à–∫–∞üåø', '–†–æ–∑–º–∞—Ä–∏–Ωüåø'],
    ['–†—É–∫–æ–ª–∞ü•¨', '–®–∞–ª—Ñ–µ–πüåø']
]


def combine_arrays(*arrays):
    combined_array = []
    for array in arrays:
        combined_array.extend(array)
    return combined_array


combined = combine_arrays(types_of_meat, types_of_vegetables, types_of_milk_and_eggs, mushrooms, nuts,
                          cereals_legumes_and_flour, fruits_and_berries, greenery)


def combine_arrays2(arrays):
    combined_array = []
    for array in arrays:
        combined_array.extend(array)
    return combined_array


com = combine_arrays2(combined)


def get_greenery():
    keyboard = types.ReplyKeyboardMarkup(row_width=2)
    buttons = []
    for row in greenery:
        button_row = []
        for word in row:
            button = types.KeyboardButton(word)
            button_row.append(button)
        buttons.append(button_row)
    keyboard.add(*[button for button_row in buttons for button in button_row])
    return keyboard


def get_nuts():
    keyboard = types.ReplyKeyboardMarkup(row_width=2)
    buttons = []
    for row in nuts:
        button_row = []
        for word in row:
            button = types.KeyboardButton(word)
            button_row.append(button)
        buttons.append(button_row)
    keyboard.add(*[button for button_row in buttons for button in button_row])
    return keyboard


def get_cereals_legumes_and_flour():
    keyboard = types.ReplyKeyboardMarkup(row_width=2)
    buttons = []
    for row in cereals_legumes_and_flour:
        button_row = []
        for word in row:
            button = types.KeyboardButton(word)
            button_row.append(button)
        buttons.append(button_row)
    keyboard.add(*[button for button_row in buttons for button in button_row])
    return keyboard


def get_fruits_and_berries():
    keyboard = types.ReplyKeyboardMarkup(row_width=2)
    buttons = []
    for row in fruits_and_berries:
        button_row = []
        for word in row:
            button = types.KeyboardButton(word)
            button_row.append(button)
        buttons.append(button_row)
    keyboard.add(*[button for button_row in buttons for button in button_row])
    return keyboard


def get_mushrooms():
    keyboard = types.ReplyKeyboardMarkup(row_width=2)
    buttons = []
    for row in mushrooms:
        button_row = []
        for word in row:
            button = types.KeyboardButton(word)
            button_row.append(button)
        buttons.append(button_row)
    keyboard.add(*[button for button_row in buttons for button in button_row])
    return keyboard


def get_types_of_milk_and_eggs():
    keyboard = types.ReplyKeyboardMarkup(row_width=2)
    buttons = []
    for row in types_of_milk_and_eggs:
        button_row = []
        for word in row:
            button = types.KeyboardButton(word)
            button_row.append(button)
        buttons.append(button_row)
    keyboard.add(*[button for button_row in buttons for button in button_row])
    return keyboard


def get_types_of_vegetables():
    keyboard = types.ReplyKeyboardMarkup(row_width=2)
    buttons = []
    for row in types_of_vegetables:
        button_row = []
        for word in row:
            button = types.KeyboardButton(word)
            button_row.append(button)
        buttons.append(button_row)
    keyboard.add(*[button for button_row in buttons for button in button_row])

    return keyboard


def get_types_of_meat():
    keyboard = types.ReplyKeyboardMarkup(row_width=2)
    buttons = []
    for row in types_of_meat:
        button_row = []
        for word in row:
            button = types.KeyboardButton(word)
            button_row.append(button)
        buttons.append(button_row)
    keyboard.add(*[button for button_row in buttons for button in button_row])

    return keyboard
