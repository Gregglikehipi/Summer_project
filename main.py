import requests
import time
from telebot import types

from Admins import for_admin_password
from Managers import for_manager_password
from Users import for_user
from datetime import datetime
from bot import bot
from DBHelper import DBHelper
from Recipe import Recipe, get_all_recipe, find_recipe_with_categories, find_recipe_with_ingredients, get_random_recipe, test, clear_text, get_recipe, get_recipe_by_manual
from keyboards import get_selection_of_recipes, get_personal_account, get_filters_for_dishes, \
    get_list_of_recipes, get_viewing_a_dish, get_add_to_the_cooked, get_start, get_info_get_balance, get_time_interval, \
    get_caloricity, get_start_for_user, get_category, get_menu, get_cuisines, cuisines, arr_category, arr_menu, kalor, \
    personal_and_favorites, get_start_for_admin, get_selection_of_products, products, get_types_of_meat, \
    get_types_of_vegetables, get_types_of_milk_and_eggs, get_mushrooms, get_nuts, \
    get_fruits_and_berries, get_greenery, get_cereals_legumes_and_flour, com, \
    get_write_a_recipe, get_start2, get_back
from ML import predict

user_state = {}

#print('1')
all_recipe = get_all_recipe()
#test(all_recipe)
print('1')

# @bot.message_handler(commands=["start"])
@bot.message_handler(func=lambda message: message.text == '/start')
def start(m):
    kb = get_start()
    text = ''
    text = m.chat.id
    print(text)
    bot.send_message(m.chat.id, '–ü—Ä–∏–≤–µ—Ç!üëãüèº –ü—Ä–µ–¥—Å—Ç–∞–≤—å—Å—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫—Ç–æ —Ç—ã‚ùìüîç', reply_markup=kb)


@bot.message_handler(func=lambda message: message.text in ['–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—åüë§', '–ú–µ–Ω–µ–¥–∂–µ—Äüíº', '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Äüîí'])
def handle_role_selection(message):
    role = message.text
    user_state[message.chat.id] = {'role': role}
    if role == '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Äüîí':
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:')
        bot.register_next_step_handler(message, for_admin_password)
    elif role == '–ú–µ–Ω–µ–¥–∂–µ—Äüíº':
        # id_manager = message.chat.id
        # man_pass(id_manager)
        # bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞:')
        bot.register_next_step_handler(message, for_manager_password)
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞:')
    elif role == '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—åüë§':
        id_user = message.chat.id
        for_user(id_user)


@bot.message_handler(func=lambda message: message.text == '–í–µ—Ä–Ω—É—Ç—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—éüè†')
def action_on_the_user(message):
    kb = get_start2()
    bot.send_message(message.chat.id, '–ö—Ç–æ —Ç—ã‚ùìüîç', reply_markup=kb)


@bot.message_handler(func=lambda message: message.text == '–î–µ–π—Å—Ç–≤–∏–µ –Ω–∞–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–ºüë§')
def action_on_the_user(message):
    kb = get_info_get_balance()
    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=kb)


@bot.message_handler(func=lambda message: message.text == '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—åüìä')
def activity(m):
    bot.send_message(m.chat.id, '–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:')
    date = datetime.today().strftime('%Y-%m-%d')
    users = DBHelper("recipe.db").get('user', ['creation_date'], [date])
    bot.send_message(m.chat.id, f'–ë—ã–ª–æ –∞–∫—Ç–∏–≤–Ω–æ –Ω–µ–¥–∞–≤–Ω–æ: {len(users)}')
    # TODO —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Ç—å


@bot.message_handler(func=lambda message: message.text == '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —á–∏—Å–ª–æ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–πüë•')
def number_of_new_users(m):
    kb = get_time_interval()
    bot.send_message(m.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫:', reply_markup=kb)


@bot.message_handler(func=lambda message: message.text == '–î–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—èüôã‚Äç‚ôÇÔ∏è')
def user_actions(m):
    user_id = m.chat.id
    for_user(user_id)


@bot.message_handler(func=lambda message: message.text == '–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ä–µ—Ü–µ–ø—Ç–∞—ÖüîÑÔ∏è')
def update_recipe_data(m):
    bot.send_message(m.chat.id, '–î–∞–Ω–Ω—ã–µ –æ —Ä–µ—Ü–µ–ø—Ç–∞—Ö –æ–±–Ω–æ–≤–ª–µ–Ω—ã')
    # TODO –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ä–µ—Ü–µ–ø—Ç–∞—Ö


@bot.message_handler(func=lambda message: message.text == '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—èüìã')
def view_information(m):
    bot.send_message(m.chat.id, '–í–≤–µ–¥–∏—Ç–µ id –Ω—É–∂–Ω–æ–≥–æ –≤–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:')
    ids_ = m.text
    user = DBHelper("recipe.db").get('user', ['id'], [ids_])
    if len(user) == 0:
        bot.send_message(m.chat.id, '–¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç')
    if len(user) == 1:
        user_ = user[0]
        if user_[4] == 'User':
            user_[2] = "Null"
        if user_[7] == None:
            user_[7] = "Null"
        text = f"id: {user_[0]}" \
               f"username: {user_[1]}" \
               f"password: {user_[2]}" \
               f"tokens: {user_[3]}" \
               f"role: {user_[4]}" \
               f"creation_date: {user_[5]}" \
               f"last_recipe_id: {user_[6]}"
        bot.send_message(m.chat.id, text)


@bot.message_handler(func=lambda message: message.text == '–ù–∞ –æ—Å–Ω–æ–≤–µ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö‚ù§Ô∏è')
def get_recipe_like(m):
    recipes = DBHelper("recipe.db").get('recipe_like', ['user_id'], [str(m.chat.id)])
    manuals_like = []
    for rec in recipes:
        recipe_ = get_recipe(all_recipe, rec[2])
        manuals_like.append(recipe_.manual)
    manuals = predict(manuals_like)
    new_recipe = get_recipe_by_manual(all_recipe, manuals[0])
    bot.register_next_step_handler(m, print_recipe(m, new_recipe))


@bot.message_handler(func=lambda message: message.text == '–ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å —Ç–æ–Ω–µ–Ω–æ–≤üí∞')
def change_the_balance_of_tokens(m):
    bot.send_message(m.chat.id, '–í–≤–µ–¥–∏—Ç–µ id –Ω—É–∂–Ω–æ–≥–æ –≤–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:')
    ids_ = m.text
    bot.send_message(m.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω—É–∂–Ω—ã–π –±–∞–ª–∞–Ω—Å:')
    num = m.text
    DBHelper("recipe.db").update('user', 'id', ids_, 'tokens', num)
    # TODO —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å


@bot.message_handler(func=lambda message: message.text == '1Ô∏è‚É£ –¥–µ–Ω—å')
def one_day(m):
    date = datetime.today().strftime('%Y-%m-%d')
    users = DBHelper("recipe.db").get('user', ['creation_date'], [date])
    bot.send_message(m.chat.id, f"–ß–∏—Å–ª–æ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –¥–µ–Ω—å: {len(users)}")

    # TODO –ø–æ–∫–∞–∑ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π


@bot.message_handler(func=lambda message: message.text == '1Ô∏è‚É£ –Ω–µ–¥–µ–ª—è')
def one_week(m):
    date = datetime.today().strftime('%Y-%m-%d')
    users = DBHelper("recipe.db").get('user', ['creation_date'], [date])
    bot.send_message(m.chat.id, f"–ß–∏—Å–ª–æ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –Ω–µ–¥–µ–ª—é: {len(users)}")
    # TODO –ø–æ–∫–∞–∑ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π


@bot.message_handler(func=lambda message: message.text == '1Ô∏è‚É£ –º–µ—Å—è—Ü')
def one_month(m):
    date = datetime.today().strftime('%Y-%m-%d')
    users = DBHelper("recipe.db").get('user', ['creation_date'], [date])
    bot.send_message(m.chat.id, f"–ß–∏—Å–ª–æ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –º–µ—Å—è—Ü: {len(users)}")
    # TODO –ø–æ–∫–∞–∑ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π


@bot.message_handler(func=lambda message: message.text == '1Ô∏è‚É£ –≥–æ–¥')
def one_year(m):
    date = datetime.today().strftime('%Y-%m-%d')
    users = DBHelper("recipe.db").get('user', ['creation_date'], [date])
    bot.send_message(m.chat.id, f"–ß–∏—Å–ª–æ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –≥–æ–¥: {len(users)}")
    # TODO –ø–æ–∫–∞–∑ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π


@bot.message_handler(func=lambda message: message.text == '–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ä–µ—Ü–µ–ø—Ç–∞—ÖüîÑ')
def recipe_data(m):
    kb = get_start_for_admin()
    bot.send_message(m.chat.id, '–î–∞–Ω–Ω—ã–µ –æ —Ä–µ—Ü–µ–ø—Ç–∞—Ö –æ–±–Ω–æ–≤–ª–µ–Ω—ã:', reply_markup=kb)


@bot.message_handler(func=lambda message: message.text == '–ü–æ–¥–±–æ—Ä–∫–∞ —Ä–µ—Ü–µ–ø—Ç–æ–≤üìÉ')
def selection_of_recipes(message):
    kb = get_selection_of_recipes()
    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–Ω–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=kb)


@bot.message_handler(func=lambda message: message.text == '–†–µ—Ü–µ–ø—Ç—ã –Ω–∞ –¥–µ–Ω—åüìöÔ∏è')
def recipes_for_the_day(message):
    bot.send_message(message.chat.id, '–í–∞—à —Å–ø–∏—Å–æ–∫ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –Ω–∞ –¥–µ–Ω—å:')
    take_token(message.chat.id, 3)
    bot.send_message(message.chat.id, '–ó–∞–≤—Ç—Ä–∞–∫')
    recipe_ = get_random_recipe(find_recipe_with_categories(all_recipe, ['–ó–∞–≤—Ç—Ä–∞–∫–∏']))
    bot.register_next_step_handler(message, print_recipe(message, recipe_))
    bot.send_message(message.chat.id, '–û–±–µ–¥')
    recipe_ = get_random_recipe(find_recipe_with_categories(all_recipe, ['–°—É–ø—ã']))
    bot.register_next_step_handler(message, print_recipe(message, recipe_))
    bot.send_message(message.chat.id, '–£–∂–∏–Ω')
    recipe_ = get_random_recipe(find_recipe_with_categories(all_recipe, ['–ì–æ—Ä—è—á–∏–µ –±–ª—é–¥–∞']))
    bot.register_next_step_handler(message, print_recipe(message, recipe_))


def print_recipe(message, recipe_):
    kb = get_back()
    text = ''
    if recipe_ != None:
        text = f"–ù–∞–∑–≤–∞–Ω–∏–µ: {recipe_.name} \n–í—Ä–µ–º—è –≥–æ—Ç–æ–≤–∫–∏: {recipe_.cook_time}\n–ü–æ—Ä—Ü–∏–π: {recipe_.count_portion}\n" \
              f"–ö–∞–ª–æ—Ä–∏–∏: {recipe_.calories[0]}\n–ë–µ–ª–∫–∏: {recipe_.calories[1]}\n–ñ–∏—Ä—ã: {recipe_.calories[2]}\n" \
              f"–£–≥–ª–µ–≤–æ–¥—ã: {recipe_.calories[3]} \n–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã: "
        ing_str = ''
        for ing in recipe_.ingredients:
            ing_str += ing[0] + ', '
        ing_str = ing_str[:len(ing_str) - 2]
        text += ing_str + '\n–ö–∞—Ç–µ–≥–æ—Ä–∏–∏: '
        cat_str = ''
        for cat in recipe_.categories:
            cat_str += cat + ', '
        cat_str = cat_str[:len(cat_str) - 2]
        text += cat_str + '\n–†–µ—Ü–µ–ø—Ç: ' + recipe_.manual
        bot.send_photo(message.chat.id, recipe_.photo)
    else:
        text = '–¢–∞–∫–∏—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤ –Ω–µ—Ç'
    bot.send_message(message.chat.id, text)


@bot.message_handler(func=lambda message: message.text == '–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç‚ù§Ô∏è')
def personal_account(m):
    kb = get_personal_account()
    bot.send_message(m.chat.id, '–í–∞—à –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç:', reply_markup=kb)


@bot.message_handler(func=lambda message: message.text == '–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω–æ–µüç≥')
def cooked(m):
    bot.send_message(m.chat.id, '–í–∞—à–µ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω–æ–µ:')
    recipes = DBHelper("recipe.db").get('recipe_cooked', ['user_id'], [str(m.chat.id)])
    for rec in recipes:
        if rec[3] == '1':
            bot.send_message(m.chat.id, '–í–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å')
        else:
            bot.send_message(m.chat.id, '–í–∞–º –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å')
        recipe_ = get_recipe(all_recipe, rec[2])
        bot.register_next_step_handler(m, print_recipe(m, recipe_))
    # TODO –≤—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ —Å–º–∞–π–ª–∏–∫–∞–º–∏ –ø–∞–ª–µ—Ü –≤–≤–µ—Ä—Ö, –ø–∞–ª–µ—Ü –≤–Ω–∏–∑


#  bot.register_next_step_handler(message, ask_feedback)


@bot.message_handler(func=lambda message: message.text == '–ü—Ä–æ–¥—É–∫—Ç—ã –Ω–∞ –∫—É—Ö–Ω–µü•°')
def products_in_the_kitchen(m):
    kb = get_selection_of_products()
    bot.send_message(m.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç—ã:', reply_markup=kb)
    # TODO –¥–∞–ª—å—à–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–æ–¥—É–∫—Ç–∞–º


@bot.message_handler(func=lambda message: message.text == '–§–∏–ª—å—Ç—Ä—ã –¥–ª—è –±–ª—é–¥üîç')
def filters_for_dishes(m):
    kb = get_filters_for_dishes()
    bot.send_message(m.chat.id, '–ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –ø–æ–¥–±–æ—Ä–∫–∏ —Ä–µ—Ü–µ–ø—Ç–æ–≤:', reply_markup=kb)


@bot.message_handler(func=lambda message: message.text == '–ö—É—Ö–Ω—èü•ê')
def types_of_cuisine(m):
    kb = get_cuisines()
    bot.send_message(m.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ö–Ω—é:', reply_markup=kb)


@bot.message_handler(func=lambda message: message.text == '–ü—Ä–æ–¥—É–∫—Ç—ãü•©')
def choose_products(m):
    kb = get_selection_of_products()
    bot.send_message(m.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç—ã:', reply_markup=kb)


@bot.message_handler(func=lambda message: message.text == '–ö–∞—Ç–µ–≥–æ—Ä–∏—èüçï')
def category(m):
    kb = get_category()
    bot.send_message(m.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', reply_markup=kb)


@bot.message_handler(func=lambda message: message.text in cuisines)
def category(message):
    kind = message.text
    print(clear_text(kind))
    DBHelper("recipe.db").insert('selected_categories', ['user_id', 'category'], [message.chat.id, clear_text(kind)])
    kb = get_filters_for_dishes()
    for cuisine in cuisines:
        if kind == cuisine:
            bot.send_message(message.chat.id, f"–í—ã–±—Ä–∞–Ω–æ: {kind}", reply_markup=kb)


@bot.message_handler(func=lambda message: message.text in arr_category)
def category(message):
    kind = message.text
    print(clear_text(kind))
    DBHelper("recipe.db").insert('selected_categories', ['user_id', 'category'], [message.chat.id, clear_text(kind)])
    kb = get_filters_for_dishes()
    for arr in arr_category:
        if kind == arr:
            bot.send_message(message.chat.id, f"–í—ã–±—Ä–∞–Ω–æ: {kind} ", reply_markup=kb)


@bot.message_handler(func=lambda message: message.text == '–ú–µ–Ω—éüçΩÔ∏è')
def menu(m):
    kb = get_menu()
    bot.send_message(m.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –º–µ–Ω—é:', reply_markup=kb)


@bot.message_handler(func=lambda message: message.text in arr_menu)
def types_of_menu(message):
    kind = message.text
    print(clear_text(kind))
    DBHelper("recipe.db").insert('selected_categories', ['user_id', 'category'], [message.chat.id, clear_text(kind)])
    kb = get_filters_for_dishes()
    for arr in arr_menu:
        if kind == arr:
            bot.send_message(message.chat.id, f"–í—ã–±—Ä–∞–Ω–æ: {kind} ", reply_markup=kb)


@bot.message_handler(func=lambda message: message.text == '–ö–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—åüçî')
def caloricity(m):
    kb = get_caloricity()
    bot.send_message(m.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å:', reply_markup=kb)


@bot.message_handler(func=lambda message: message.text in kalor)
def caloricity(message):
    kind = message.text
    kb = get_filters_for_dishes()
    for arr in kalor:
        if kind == arr:
            bot.send_message(message.chat.id, f"–í—ã–±—Ä–∞–Ω–æ: {kind} ", reply_markup=kb)


@bot.message_handler(func=lambda message: message.text == '–°–±—Ä–æ—Å–∏—Ç—åüîÑ')
def reset(m):
    DBHelper("recipe.db").delete('selected_categories', 'user_id', m.chat.id)
    DBHelper("recipe.db").delete('selected_ingredients', 'user_id', m.chat.id)
    bot.send_message(m.chat.id, '–í–∞—à–∏ —Ñ–∏–ª—å—Ç—Ä—ã —Å–±—Ä–æ—à–µ–Ω—ã')


@bot.message_handler(func=lambda message: message.text == '–°–ø–∏—Å–æ–∫ —Ä–µ—Ü–µ–ø—Ç–æ–≤üìÉ')
def list_of_recipes(m):
    kb = get_list_of_recipes()
    bot.send_message(m.chat.id, '–í–∞—à —Ä–µ—Ü–µ–ø—Ç:', reply_markup=kb)


#  bot.register_next_step_handler(message, ask_feedback)
@bot.message_handler(func=lambda message: message.text == '–ù–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –Ω–∞ –∫—É—Ö–Ω–µü•°')
def based_on_products_in_the_kitchen(m):
    bot.send_message(m.chat.id, '–í—ã –≤—ã–±—Ä–∞–ª–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –Ω–∞ –∫—É—Ö–Ω–µ:')
    # TODO —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ç–æ—Ç —Ñ–∞–∫—Ç, —á—Ç–æ –±—É–¥–µ—Ç –ø–æ–¥–±–∏—Ä–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –Ω–∞ –∫—É—Ö–Ω–µ –∏ –æ—Ç–º–µ—Ç–∫–∞ –≥–∞–ª–æ—á–∫–∞


@bot.message_handler(func=lambda message: message.text == '–ù–∞ –æ—Å–Ω–æ–≤–µ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞‚ù§Ô∏è')
def based_on_favorites(m):
    bot.send_message(m.chat.id, '–í—ã –≤—ã–±—Ä–∞–ª–∏ –Ω–∞ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞:')
    # TODO —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ç–æ—Ç —Ñ–∞–∫—Ç, —á—Ç–æ –±—É–¥–µ—Ç –ø–æ–¥–±–∏—Ä–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –Ω–∞ –∫—É—Ö–Ω–µ –∏ –æ—Ç–º–µ—Ç–∫–∞ –≥–∞–ª–æ—á–∫–∞


@bot.message_handler(func=lambda message: message.text == '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ—Ü–µ–ø—Çüìú')
def viewing_a_dish(m):
    kb = get_viewing_a_dish()
    ing = []
    ingredients = DBHelper("recipe.db").get('selected_ingredients', ['user_id'], [str(m.chat.id)])
    for inr in ingredients:
        ing.append(inr[2])
    recipes = find_recipe_with_ingredients(all_recipe, ing)
    cat = []
    categories = DBHelper("recipe.db").get('selected_categories', ['user_id'], [str(m.chat.id)])
    for ca in categories:
        cat.append(ca[2])
    recipes = find_recipe_with_ingredients(recipes, ing)
    recipe_ = get_random_recipe(recipes)
    take_token(m.chat.id, 1)
    DBHelper("recipe.db").update('user', 'username', m.chat.id, 'last_recipe_id', recipe_.id_)
    print('2')
    bot.register_next_step_handler(m, print_recipe(m, recipe_))
    bot.send_message(m.chat.id, '–í–∞—à —Ä–µ—Ü–µ–ø—Ç. –ù–∞–∂–º–∏—Ç–µ –µ—â—ë —Ä–∞–∑ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ä–µ—Ü–µ–ø—Ç–∞:', reply_markup=kb)


@bot.message_handler(func=lambda message: message.text == '–î–æ–±–∞–≤–∏—Ç—å –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç‚ù§Ô∏è')
def add_to_your_personal_account(m):
    kb = personal_and_favorites()
    print('1')
    user = DBHelper("recipe.db").get('user', ['username'], [str(m.chat.id)])
    DBHelper("recipe.db").insert('recipe_like', ['user_id', 'recipe_id'], [str(m.chat.id), user[0][6]])
    bot.send_message(m.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ, –∫—É–¥–∞ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç:', reply_markup=kb)
    # TODO —Ä–µ–∞–ª–∏–∑–æ–≤–∞—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –∏ –≤–æ–∑–≤—Ä–∞—Ç –Ω–∞ –Ω—É–∂–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É


def take_token(name, num):
    user = DBHelper("recipe.db").get('user', ['username'], [str(name)])
    tokens = int(user[0][3])
    tokens -= num
    DBHelper("recipe.db").update('user', 'username', name, 'tokens', tokens)


@bot.message_handler(func=lambda message: message.text == '–î–æ–±–∞–≤–∏—Ç—å –≤ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω–æ–µüç≥')
def add_to_the_cooked(m):
    kb = get_add_to_the_cooked()
    bot.send_message(m.chat.id, '–ü–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å –ª–∏ –≤–∞–º –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω–æ–µ –±–ª—é–¥–æ?', reply_markup=kb)
    # TODO —Ä–µ–∞–ª–∏–∑–æ–≤–∞—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–º–∞–π–ª–∏–∫–æ–≤ –∫ —Ä–µ—Ü–µ–ø—Ç—É –∏ –≤–æ–∑–≤—Ä–∞—Ç –Ω–∞ –Ω—É–∂–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É


@bot.message_handler(func=lambda message: message.text == '–ü–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—åüëçüèª')
def like(m):
    user = DBHelper("recipe.db").get('user', ['username'], [str(m.chat.id)])
    DBHelper("recipe.db").insert('recipe_cooked', ['user_id', 'recipe_id', 'rating'], [str(m.chat.id), user[0][6], '1'])
    bot.send_message(m.chat.id, '–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤')
    return start(m)


# TODO —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–∞–π–∫–∞ –∫ —Ä–µ—Ü–µ–ø—Ç—É


@bot.message_handler(func=lambda message: message.text == '–ù–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—åüëéüèª')
def dislike(m):
    user = DBHelper("recipe.db").get('user', ['username'], [str(m.chat.id)])
    DBHelper("recipe.db").insert('recipe_cooked', ['user_id', 'recipe_id', 'rating'], [str(m.chat.id), user[0][6], '0'])
    bot.send_message(m.chat.id, '–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤')
    return start(m)


@bot.message_handler(func=lambda message: message.text == '–£–¥–∞–ª–∏—Ç—å –ø–∞–ø–∫—ÉüóëÔ∏è')
def delete_a_folder(m):
    # TODO —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–∫–∞–∑ –ø–∞–ø–æ–∫ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ –∫–Ω–æ–ø–∫–µ
    bot.send_message(m.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:')


@bot.message_handler(func=lambda message: message.text == '–î–æ–±–∞–≤–∏—Ç—å –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø–∞–ø–∫—ÉüóÇÔ∏è')
def delete_a_folder(m):
    # TODO —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–∫–∞–∑ –ø–∞–ø–æ–∫ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ –∫–Ω–æ–ø–∫–µ
    bot.send_message(m.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:')


@bot.message_handler(func=lambda message: message.text == '–õ–∏—á–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ãüìú')
def personal_recipes(m):
    # TODO —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤—ã–≤–æ–¥ —Ä–µ—Ü–µ–ø—Ç–æ–≤
    bot.send_message(m.chat.id, '–í–∞—à–∏ –ª–∏—á–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã:')


@bot.message_handler(func=lambda message: message.text == '–ò–∑–±—Ä–∞–Ω–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã‚ù§Ô∏è')
def dislike(m):
    # TODO —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤—ã–≤–æ–¥ —Ä–µ—Ü–µ–ø—Ç–æ–≤
    bot.send_message(m.chat.id, '–í–∞—à–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã:')
    recipes = DBHelper("recipe.db").get('recipe_like', ['user_id'], [str(m.chat.id)])
    for rec in recipes:
        recipe_ = get_recipe(all_recipe, rec[2])
        bot.register_next_step_handler(m, print_recipe(m, recipe_))



@bot.message_handler(func=lambda message: message.text == '–î–æ–±–∞–≤–∏—Ç—å —Ä–µ—Ü–µ–ø—Çüìù')
def add_a_recipe(m):
    # TODO —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞
    bot.send_message(m.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞:')
    bot.register_next_step_handler(m, write_a_recipe)


def write_a_recipe(m):
    recipe_name = m.text
    kb = get_write_a_recipe()
    bot.send_message(m.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Ä–µ—Ü–µ–ø—Ç:', reply_markup=kb)


@bot.message_handler(func=lambda message: message.text == '–í–≤–µ—Å—Ç–∏ —Ä–µ—Ü–µ–ø—Çüìù')
def recipe(m):
    recipe = m.text
    bot.register_next_step_handler(m, write)


def write(m):
    bot.send_message(m.chat.id, '–†–µ—Ü–µ–ø—Ç –¥–æ–±–∞–≤–ª–µ–Ω')
    kb = get_selection_of_products()
    # bot.register_next_step_handler(m, –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ—Ü–µ–ø—Ç–∞)
    bot.send_message(m.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç—ã:', reply_markup=kb)


def selection_of_products_for_the_recipe(m):
    # TODO –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –≤ –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ—Ü–µ–ø—Ç–æ–≤
    recipe_name = m.text
    kb = get_selection_of_products()
    bot.send_message(m.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç—ã:', reply_markup=kb)
    # bot.register_next_step_handler(message, –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ—Ü–µ–ø—Ç–∞)


def selection_of_products(m):
    # TODO –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –≤ –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ—Ü–µ–ø—Ç–æ–≤
    kb = get_selection_of_products()
    bot.send_message(m.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç—ã:', reply_markup=kb)
    # bot.register_next_step_handler(message, –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ—Ü–µ–ø—Ç–∞)


@bot.message_handler(func=lambda message: message.text in products)
def product(message):
    kind = message.text
    if kind == products[0]:
        kb = get_types_of_meat()
        bot.send_message(message.chat.id, f"–í—ã–±—Ä–∞–Ω–æ: {kind} ", reply_markup=kb)
    elif kind == products[1]:
        kb = get_types_of_vegetables()
        bot.send_message(message.chat.id, f"–í—ã–±—Ä–∞–Ω–æ: {kind} ", reply_markup=kb)
    elif kind == products[2]:
        kb = get_types_of_milk_and_eggs()
        bot.send_message(message.chat.id, f"–í—ã–±—Ä–∞–Ω–æ: {kind} ", reply_markup=kb)
    elif kind == products[3]:
        kb = get_mushrooms()
        bot.send_message(message.chat.id, f"–í—ã–±—Ä–∞–Ω–æ: {kind} ", reply_markup=kb)
    elif kind == products[4]:
        kb = get_nuts()
        bot.send_message(message.chat.id, f"–í—ã–±—Ä–∞–Ω–æ: {kind} ", reply_markup=kb)
    elif kind == products[5]:
        kb = get_cereals_legumes_and_flour()
        bot.send_message(message.chat.id, f"–í—ã–±—Ä–∞–Ω–æ: {kind} ", reply_markup=kb)
    elif kind == products[6]:
        kb = get_fruits_and_berries()
        bot.send_message(message.chat.id, f"–í—ã–±—Ä–∞–Ω–æ: {kind} ", reply_markup=kb)
    elif kind == products[7]:
        kb = get_greenery()
        bot.send_message(message.chat.id, f"–í—ã–±—Ä–∞–Ω–æ: {kind} ", reply_markup=kb)


@bot.message_handler(func=lambda message: message.text in com)
def product(message):
    kind = message.text
    print(clear_text(kind))
    DBHelper("recipe.db").insert('selected_ingredients', ['user_id', 'ingredient'], [message.chat.id, clear_text(kind)])
    kb = get_selection_of_products()
    bot.send_message(message.chat.id, f"–í—ã–±—Ä–∞–Ω–æ: {kind}")
    bot.send_message(message.chat.id, '–ï—Å–ª–∏ –Ω—É–∂–Ω–æ, –≤—ã–±–µ—Ä–∏—Ç–µ –µ—â—ë –ø—Ä–æ–¥—É–∫—Ç:', reply_markup=kb)


@bot.message_handler(func=lambda message: message.text == '–ù–∞–∑–∞–¥‚èÆÔ∏è')
def back1(m):
    kb = get_start_for_user()
    bot.send_message(m.chat.id, '–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞–∑–∞–¥', reply_markup=kb)


@bot.message_handler(func=lambda message: message.text == '–ù–∞–∑–∞–¥‚è™')
def back2(m):
    kb = get_start_for_user()
    bot.send_message(m.chat.id, '–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞–∑–∞–¥', reply_markup=kb)


@bot.message_handler(func=lambda message: message.text == '–ù–∞–∑–∞–¥‚óÄÔ∏è')
def back3(m):
    kb = get_selection_of_recipes()
    bot.send_message(m.chat.id, '–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞–∑–∞–¥', reply_markup=kb)


@bot.message_handler(func=lambda message: message.text == '–ù–∞–∑–∞–¥‚Ü©Ô∏è')
def back4(m):
    kb = get_selection_of_recipes()
    bot.send_message(m.chat.id, '–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞–∑–∞–¥', reply_markup=kb)


@bot.message_handler(func=lambda message: message.text == '–ù–∞–∑–∞–¥‚¨ÖÔ∏è')
def back5(m):
    kb = get_list_of_recipes()
    bot.send_message(m.chat.id, '–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞–∑–∞–¥', reply_markup=kb)


@bot.message_handler(func=lambda message: message.text == '–ü–æ–∫–∞–∑–∞—Ç—å –ø–∞–ø–∫–∏üóÇÔ∏è')
def show_folders(m):
    # TODO —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–∫–∞–∑ –ø–∞–ø–æ–∫
    bot.send_message(m.chat.id, '–í–∞—à —Å–ø–∏—Å–æ–∫ –ø–∞–ø–æ–∫:')


#  bot.register_next_step_handler(m, show_all_folders)


@bot.message_handler(func=lambda message: message.text == '–°–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—ÉüìÅ')
def create_a_folder(m):
    # TODO —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–æ–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
    bot.send_message(m.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –ø–∞–ø–∫–∏:')
    bot.register_next_step_handler(m, creating_folder)


def creating_folder(m):
    name_folder = m.text
    button = types.KeyboardButton(name_folder)
    bot.send_message(m.chat.id, f"–ü–∞–ø–∫–∞ {name_folder} —Å–æ–∑–¥–∞–Ω–∞", reply_markup=button)


"""def show_all_folders(m):
    folders = get_all_folders()
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for folder in folders:
        button = types.KeyboardButton(folder)
        keyboard.add(button)
    bot.send_message(m.chat.id, text="–°–ø–∏—Å–æ–∫ –ø–∞–ø–æ–∫:", reply_markup=keyboard)


def get_all_folders():
    all_folders = []
    dialogs = bot.get_dialogs()
    for dialog in dialogs:
        folder_name = dialog.title
        all_folders.append(folder_name)
    return all_folders"""

while True:
    try:
        bot.polling()
    except Exception as e:
        print(f"An error occurred: {e}")
        time.sleep(5)
